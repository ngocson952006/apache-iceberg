version: "3"

services:
  # Nessie Catalog Server Using In-Memory Store
  nessie:
    image: projectnessie/nessie:latest
    privileged: true
    container_name: nessie
    networks:
      lakehouse-net:
    ports:
      - 19120:19120
    volumes:
      - nessie-data:/var/lib/nessie/data

  # Minio Storage Server (Object Store for Iceberg Tables)
  minio:
    image: minio/minio:latest
    privileged: true
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_REGION=us-east-1
    networks:
      lakehouse-net:
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio-data:/data

  # Dremio (Lakehouse Query Engine)
  dremio:
    image: dremio/dremio-oss:latest
    privileged: true
    container_name: dremio
    networks:
      lakehouse-net:
    environment:
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    ports:
      - 9047:9047
      - 31010:31010
      - 32010:32010
    volumes:
      - dremio-data:/opt/dremio/data

  # Spark (Data Processing & Ingestion)
  spark:
    image: alexmerced/spark35nb:latest
    privileged: true
    container_name: spark
    platform: linux/amd64
    networks:
      lakehouse-net:
    ports:
      - 8080:8080  # Master Web UI
      - 7077:7077  # Master Port
      - 8888:8888  # Jupyter Notebook
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=password
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=us-east-1
      - CATALOG_URI=http://nessie:19120/api/v1
      - STORAGE_URI=http://172.19.0.6:9000
      - JDBC_URL=jdbc:postgresql://postgres:5432/mydb
      - JUPYTER_TOKEN=easy
      - JUPYTER_PASSWORD=your_strong_password_here
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=4321
      - CHOWN_HOME=yes
      - CHOWN_HOME_OPTS=-R
    volumes:
      - spark-notebooks:/app
      - ./notebooks:/home/justdataplease

  # Postgres (Simulating an OLTP Database)
  postgres:
    image: postgres:latest
    privileged: true
    container_name: postgres
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    networks:
      lakehouse-net:
    ports:
      - "5435:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Apache Superset (BI & Dashboards)
  superset:
    image: alexmerced/dremio-superset
    privileged: true
    container_name: superset
    platform: linux/amd64
    environment:
      - WTF_CSRF_ENABLED=False
      - WTF_CSRF_CHECK_DEFAULT=False
      - CSRF_ENABLED=False
      - TALISMAN_ENABLED=False
      - SESSION_COOKIE_SECURE=False
      - SESSION_COOKIE_SAMESITE="None"
      - SESSION_COOKIE_HTTPONLY=True
    networks:
      lakehouse-net:
    ports:
      - 8088:8088
    volumes:
      - superset-data:/app/superset_home

  # Airflow Postgres (metadata database for Airflow)
  airflow-db:
    image: postgres:15
    container_name: airflow-db
    privileged: true
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      lakehouse-net:
    volumes:
      - airflow-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Airflow rate limit storage (and reusable for other components)
  redis:
    image: redis:7-alpine
    privileged: true
    container_name: airflow-redis
    networks:
      lakehouse-net:
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "", "--appendonly", "no"]

  # One-time initializer to set up the Airflow DB and admin user
  airflow-init:
    image: apache/airflow:2.9.3
    privileged: true
    container_name: airflow-init
    depends_on:
      airflow-db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      lakehouse-net:
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=9dZb0nHfWc9D4e2lPpYkY2JmQ1s6g8h3w5x7z9aBcDe=
      - AIRFLOW__CORE__LOAD_EXAMPLES=True
      - AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI=redis://redis:6379/0
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    entrypoint: /bin/bash
    command: -c "
      airflow db migrate &&
      airflow users create \
        --role Admin \
        --username admin \
        --password admin \
        --firstname Air \
        --lastname Flow \
        --email admin@example.com
      "
    restart: "no"

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.9.3
    privileged: true
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      lakehouse-net:
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=9dZb0nHfWc9D4e2lPpYkY2JmQ1s6g8h3w5x7z9aBcDe=
      - AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI=redis://redis:6379/0
    ports:
      - "8081:8080"  # Airflow Web UI
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    command: webserver

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.9.3
    privileged: true
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      lakehouse-net:
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=9dZb0nHfWc9D4e2lPpYkY2JmQ1s6g8h3w5x7z9aBcDe=
      - AIRFLOW__WEBSERVER__RATE_LIMIT_STORAGE_URI=redis://redis:6379/0
    volumes:
      - airflow-dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    command: scheduler

networks:
  lakehouse-net:

volumes:
  nessie-data:
  minio-data:
  dremio-data:
  spark-notebooks:
  postgres-data:
  superset-data:
  airflow-dags:
  airflow-logs:
  airflow-plugins:
  airflow-postgres-data:
